minikube:
  enabled: false

jenkins:
  fullnameOverride: jenkins

  # Avoid debugging persistence issues, always start fresh from Config as Code
  persistence:
    enabled: false

  controller:
    servicePort: 8080
    targetPort: 8080

    # URL used to access Jenkins home, typically a "publicly" accessible url
    jenkinsUrl: http://localhost:8080

    componentName: "jenkins-controller"
    imagePullPolicy: IfNotPresent

    sidecars:
      configAutoReload:
        enabled: true

    # Disable Kubernetes from installing plugins since we install plugins on the Jenkins image
    # Recommended by the Jenkins team to build our own Jenkins image
    # https://github.com/jenkinsci/helm-charts/tree/main/charts/jenkins#consider-using-a-custom-image
    installPlugins: false
  
    prometheus:
      enabled: true

    JCasC:
      # Disabling because they're using jenkins.controller.tag to check for SemVer
      # which breaks Skaffold tagging policies since we're tagging with latest and SHA digests
      # https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/templates/_helpers.tpl#L118
      defaultConfig: false

    # Jenkins environment variables
    #
    # containerEnv:
    #   - name: EXAMPLE
    #     value: foobar
    containerEnv: {}

  agent:
    # URL used to access Jenkins home from agents, typically a private cluster endpoint
    jenkinsUrl: http://jenkins.jenkins.svc.cluster.local:8080

  # Main Jenkins Configuration as Code (CasC)
  # Supports environments variables: ${EXAMPLE}
  #
  # config:
  #   jenkins:
  #     disableRememberMe: false
  #     mode: NORMAL
  #     numExecutors: 0
  #     labelString: ""
  #     projectNamingStrategy: "standard"
  #     markupFormatter:
  #       plainText
  config: {}

  # Jenkins Kubernetes CasC separated from main to allow independent agent configuration
  # Supports environments variables: ${EXAMPLE}
  #
  # kubernetes:
  #   name: "kubernetes"
  #   ...
  #   podLabels:
  #   - key: "jenkins/jenkins-agent"
  #     value: "true"
  kubernetes:
    containerCapStr: "10"
    connectTimeout: "5"
    readTimeout: "15"
    maxRequestsPerHostStr: "32"
    name: "kubernetes"
    podLabels:
    - key: "jenkins/jenkins-agent"
      value: "true"

  # Jenkins Kubernetes agent Configuration as Code, environments variables supported
  # reference: https://plugins.jenkins.io/kubernetes/#plugin-content-pod-template
  # example agent Docker images: https://github.com/jenkins-infra/docker-inbound-agents
  #
  # agents:
  #   default:
  #     label: "default"
  #     containers:
  #     - name: "jnlp"
  #       image: "jenkins/inbound-agent:4.11.2-4"
  #   example-gradle-monogo:
  #     label: "gradle"
  #     containers:
  #     - name: "jnlp"
  #       image: "johnnyhuy/jenkins-gradle:latest"
  #       privileged: true
  #       resourceLimitCpu: 512m
  #       resourceLimitMemory: 512Mi
  #       resourceRequestCpu: 512m
  #       resourceRequestMemory: 512Mi
  #       ttyEnabled: false
  #       workingDir: /home/jenkins/agent
  #       envVars:
  #         - envVar:
  #             key: "EXAMPLE"
  #             value: "foobar"
  #     - name: "mongo"
  #       image: "mongo:latest"
  #       args: "^${computer.jnlpmac} ^${computer.name}"
  #     idleMinutes: 0
  #     instanceCap: 2147483647
  #     label: default
  #     nodeUsageMode: EXCLUSIVE
  #     podRetention: Never
  #     showRawYaml: true
  #     serviceAccount: default
  #     slaveConnectTimeoutStr: 100
  #     yamlMergeStrategy: override
  #   example-node-mysql:
  #     label: "node"
  #     containers:
  #     - name: "jnlp"
  #       image: "johnnyhuy/jenkins-node:latest"
  #     - name: "mysql"
  #       image: "mysql:latest"
  agents: {}
    